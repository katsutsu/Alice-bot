import discord
from discord.ext import commands, tasks
import json
import logging
import os
import random
from dotenv import load_dotenv
from time_utils import get_game_time, parse_time
from datetime import datetime, timedelta

# ======================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø
# ======================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log',
    encoding='utf-8'
)

# ======================
# –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ======================
try:
    with open('config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    logging.info("–ö–æ–Ω—Ñ–∏–≥ config.json –∑–∞–≥—Ä—É–∂–µ–Ω")
except Exception as e:
    logging.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
    exit()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    logging.critical("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit()

# ======================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# ======================
intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(
    command_prefix="!",
    intents=intents,
    help_command=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏
)

# ======================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–ë–´–¢–ò–Ø–ú–ò
# ======================
def load_events():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ events.json"""
    try:
        with open('events.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ events.json: {e}")
        return {}

@tasks.loop(seconds=30)
async def check_events():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    try:
        game_time = get_game_time()
        current_time = game_time.strftime("%H:%M")
        current_day = game_time.strftime("%A").lower()
        events_data = load_events()

        for event in events_data.get(current_day, []) + events_data.get("daily", []):
            event_time = datetime.combine(game_time.date(), parse_time(event["start"]))
            remind_time = event_time - timedelta(minutes=config["REMIND_BEFORE_MINUTES"])
            
            if current_time == remind_time.strftime("%H:%M"):
                channel = bot.get_channel(config["CHANNEL_ID"])
                if channel:
                    ping_target = event.get('role_to_ping', '@everyone')
                    await channel.send(
                        f"üîî {ping_target} –ß–µ—Ä–µ–∑ {config['REMIND_BEFORE_MINUTES']} –º–∏–Ω—É—Ç: {event['name']}"
                    )
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {event['name']}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_events: {e}")

# ======================
# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# ======================
@bot.command()
async def events(ctx, day: str = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å"""
    try:
        events_data = load_events()
        if not events_data:
            await ctx.send("‚õî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return

        game_time = get_game_time()
        requested_day = day.lower() if day else game_time.strftime("%A").lower()
        events_list = events_data.get(requested_day, []) + events_data.get("daily", [])

        if not events_list:
            await ctx.send(f"üì≠ –ù–∞ {requested_day.capitalize()} –∏–≤–µ–Ω—Ç–æ–≤ –Ω–µ—Ç")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        events_list.sort(key=lambda x: x["start"])
        message = f"üìÖ {requested_day.capitalize()}\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n"
        
        for event in events_list:
            hour = int(event["start"][:2]) % 12 or 12
            message += f"‚Ä¢ :clock{hour}: {event['start']}-{event['end']}: {event['name']}\n"

        await ctx.send(message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã events: {e}")
        await ctx.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@bot.command()
async def debugtime(ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è –∏ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ"""
    try:
        game_time = get_game_time()
        current_time_str = game_time.strftime("%H:%M")
        current_day = game_time.strftime("%A").lower()
        events_data = load_events()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        today_events = events_data.get(current_day, []) + events_data.get("daily", [])
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
        next_event = None
        min_diff = float('inf')
        
        for event in today_events:
            event_time = parse_time(event["start"])
            event_datetime = datetime.combine(game_time.date(), event_time)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
            time_diff = (event_datetime - game_time).total_seconds() / 60
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
            if 0 < time_diff < min_diff:
                min_diff = time_diff
                next_event = event
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"‚è∞ **–¢–µ–∫—É—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è (UTC+1):** {current_time_str}\n"
            f"üìÖ **–î–∞—Ç–∞:** {game_time.strftime('%d.%m.%Y')}\n"
            "‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n"
        )
        
        if next_event:
            message += (
                f"‚ñ∂ **–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ:** {next_event['name']}\n"
                f"üïí **–ù–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑:** {int(min_diff)} –º–∏–Ω. (–≤ {next_event['start']})"
            )
        else:
            message += "‚è≥ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç"
            
        await ctx.send(message)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ debugtime: {e}")
        await ctx.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏")

# ======================
# –°–ò–°–¢–ï–ú–ù–´–ï –°–û–ë–´–¢–ò–Ø
# ======================
@bot.event
async def on_ready():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    print("\n" + "="*50)
    print(f"–ë–æ—Ç {bot.user.name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!")
    print(f"–°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}")
    print(f"ID: {bot.user.id}")
    print("="*50 + "\n")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.watching,
            name="–∑–∞ –•–∞–æ—Å–æ–º üëÅÔ∏è",
            details="–û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–æ–±—ã—Ç–∏—è"
        ),
        status=discord.Status.online
    )
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Å—Ç–∞—Ç—É—Å–æ–º '–°–º–æ—Ç—Ä–∏—Ç –∑–∞ –•–∞–æ—Å–æ–º'")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    check_events.start()

# ======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ======================
if __name__ == "__main__":
    print("="*50)
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Alice...")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print(f"‚Ä¢ –¢–æ–∫–µ–Ω: {'–Ω–∞–π–¥–µ–Ω' if TOKEN else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"‚Ä¢ –ö–∞–Ω–∞–ª: {config.get('CHANNEL_ID', '‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+1")
    print("="*50)

    try:
        bot.run(TOKEN)
    except discord.LoginError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        print("="*50)